{"version":3,"sources":["providers/TaskProvider.js","components/NewTaskForm.js","components/Task.js","components/TaskList.js","App.js","serviceWorker.js","index.js"],"names":["TaskContext","createContext","useTasks","useContext","TaskProvider","children","useState","tasks","setTasks","Provider","value","addTask","task","id","v4","complete","setStatusTask","status","map","t","NewTaskForm","setTask","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","Task","checked","className","TaskList","i","key","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOAGMA,EAAcC,0BACPC,EAAW,kBAAMC,qBAAWH,IAE1B,SAASI,EAAT,GAAqC,IAAbC,EAAY,EAAZA,SAAY,EACvBC,mBAAS,IADc,mBAC1CC,EAD0C,KACnCC,EADmC,KAiBjD,OACE,kBAACR,EAAYS,SAAb,CAAsBC,MAAO,CAAEH,QAAOI,QAfxB,SAACC,GAAD,OACdJ,EAAS,GAAD,mBACHD,GADG,CAEN,CACEM,GAAIC,cACJF,OACAG,UAAU,OASiCC,cAL3B,SAACH,EAAII,GACzBT,EAASD,EAAMW,KAAI,SAACC,GAAD,OAAQA,EAAEN,KAAOA,EAAT,eAAmBM,EAAnB,CAAsBJ,SAAUE,IAAWE,SAKnEd,GCtBQ,SAASe,IAAe,IAAD,EACZd,mBAAS,IADG,mBAC7BM,EAD6B,KACvBS,EADuB,KAE5BV,EAAYT,IAAZS,QAQR,OACE,0BAAMW,SAPO,SAACC,GACdA,EAAEC,iBACFb,EAAQC,GACRS,EAAQ,MAKN,2BACEI,KAAK,OACLf,MAAOE,EACPc,YAAY,mBACZC,SAAU,SAACJ,GAAD,OAAOF,EAAQE,EAAEK,OAAOlB,QAClCmB,UAAQ,IAEV,wCCnBS,SAASC,EAAT,GAAuC,IAAvBjB,EAAsB,EAAtBA,GAAID,EAAkB,EAAlBA,KAAMG,EAAY,EAAZA,SAC/BC,EAAkBd,IAAlBc,cAIR,OACE,4BACE,4BACE,2BAAOS,KAAK,WAAWE,SALX,SAACJ,GAAD,OAAOP,EAAcH,EAAIU,EAAEK,OAAOG,aAOhD,4BACE,0BAAMC,UAAWjB,EAAW,YAAc,IAAKH,KCVxC,SAASqB,IAAY,IAExB1B,EAAUL,IAAVK,MAER,OACI,+BACI,+BAEQA,EAAMW,KAAI,SAACN,EAAMsB,GAAP,OACV,kBAACJ,EAAD,eAAMK,IAAKD,GAAOtB,SCEvBwB,MAVf,WACE,OACE,yBAAKJ,UAAU,aACb,wBAAIA,UAAU,SAAd,aACA,kBAACZ,EAAD,MACA,kBAACa,EAAD,MAHF,OCKgBI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACxC,EAAD,KACE,kBAAC,EAAD,QAGJyC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.8084ddca.chunk.js","sourcesContent":["import React, { createContext, useState, useContext } from \"react\";\r\nimport { v4 } from \"uuid\";\r\n\r\nconst TaskContext = createContext();\r\nexport const useTasks = () => useContext(TaskContext);\r\n\r\nexport default function TaskProvider({ children }) {\r\n  const [tasks, setTasks] = useState([]);\r\n\r\n  const addTask = (task) =>\r\n    setTasks([\r\n      ...tasks,\r\n      {\r\n        id: v4(),\r\n        task,\r\n        complete: false,\r\n      },\r\n    ]);\r\n\r\n  const setStatusTask = (id, status) => {\r\n    setTasks(tasks.map((t) => (t.id === id ? { ...t, complete: status } : t)));\r\n  };\r\n\r\n  return (\r\n    <TaskContext.Provider value={{ tasks, addTask, setStatusTask }}>\r\n      {children}\r\n    </TaskContext.Provider>\r\n  );\r\n}\r\n","import React, { useState } from \"react\";\r\nimport { useTasks } from \"../providers/TaskProvider\";\r\n\r\nexport default function NewTaskForm() {\r\n  const [task, setTask] = useState(\"\");\r\n  const { addTask } = useTasks();\r\n\r\n  const submit = (e) => {\r\n    e.preventDefault();\r\n    addTask(task);\r\n    setTask(\"\");\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <input\r\n        type=\"text\"\r\n        value={task}\r\n        placeholder=\"Get some eggs...\"\r\n        onChange={(e) => setTask(e.target.value)}\r\n        required\r\n      />\r\n      <button>Add</button>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { useTasks } from \"../providers/TaskProvider\";\r\n\r\nexport default function Task({ id, task, complete }) {\r\n  const { setStatusTask } = useTasks();\r\n\r\n  const checkTask = (e) => setStatusTask(id, e.target.checked);\r\n\r\n  return (\r\n    <tr>\r\n      <td>\r\n        <input type=\"checkbox\" onChange={checkTask} />\r\n      </td>\r\n      <td>\r\n        <span className={complete ? \"task-done\" : \"\"}>{task}</span>\r\n      </td>\r\n    </tr>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Task from \"./Task\";\r\nimport {useTasks} from \"../providers/TaskProvider\";\r\n\r\nexport default function TaskList() {\r\n\r\n    const { tasks } = useTasks();\r\n\r\n    return (\r\n        <table>\r\n            <tbody>\r\n                {\r\n                    tasks.map((task, i) => \r\n                    <Task key={i} {...task} />\r\n                    )\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n","import React from 'react'\nimport './style/todo.scss'\nimport NewTaskForm from './components/NewTaskForm'\nimport TaskList from './components/TaskList'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">Todo List</h1>\n      <NewTaskForm />\n      <TaskList />ya\n    </div>\n  )\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport TaskProvider from \"./providers/TaskProvider\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <TaskProvider>\n      <App />\n    </TaskProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}